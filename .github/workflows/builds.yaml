name: CICD

env:
  RUST_BACKTRACE: full
  CARGO_TERM_COLOR: always

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  binary-builds:
    name: Builds for ${{ matrix.target }} ${{ matrix.channel }} on ${{ matrix.os }}
    runs-on: ubuntu-latest
    env:
      SCCACHE_CACHE_SIZE: 2G
      SCCACHE_DIR: ${{ matrix.sccache-path }}
      RUSTC_WRAPPER: sccache
      RUSTV: ${{ matrix.rust }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        channel: [nightly]
        target:
          # Linux x64 gnu and musl
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          # Windows x86_64
          - x86_64-pc-windows-msvc
          # Linux arm64 gnu and musl
          - aarch64-unknown-linux-gnu
          - aarch64-unknown-linux-musl
        include:
          - os: ubuntu-latest
            sccache-path: /home/runner/.cache/sccache
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Install sccache (ubuntu-latest)
        if: matrix.os == 'ubuntu-latest'
        env:
          LINK: https://github.com/mozilla/sccache/releases/download
          SCCACHE_VERSION: 0.3.3
        run: |
          SCCACHE_FILE=sccache-v$SCCACHE_VERSION-x86_64-unknown-linux-musl
          mkdir -p $HOME/.local/bin
          curl -L "$LINK/v$SCCACHE_VERSION/$SCCACHE_FILE.tar.gz" | tar xz
          mv -f $SCCACHE_FILE/sccache $HOME/.local/bin/sccache
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install Rust ${{ matrix.target }} ${{ matrix.channel }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.channel }}
          target: ${{ matrix.target }}
          override: true

      - name: Cache cargo registry
        uses: actions/cache@v2
        continue-on-error: false
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ matrix.target }}-cargo-

      - name: Save sccache
        uses: actions/cache@v2
        continue-on-error: false
        with:
          path: ${{ matrix.sccache-path }}
          key: ${{ matrix.target }}-sccache-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ matrix.target }}-sccache-

      - name: Start sccache server
        run: sccache --start-server

      - name: ${{ matrix.target }} build
        run: cargo build --release

      - name: Upload binary artifact
        uses: actions/upload-artifact@v3
        with:
          name: Niumside-Pop-Tracker_${{ matrix.channel }}-${{ matrix.target }}
          path: target/release/niumside-poptracker

      - name: Print sccache stats
        run: sccache --show-stats
      - name: Stop sccache server
        run: sccache --stop-server || true

  docker-image-build-and-push:
    needs: binary-builds
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
      IMAGE_TAG: alpine-unstable
    # strategy:
    #   fail-fast: true
    #   matrix:
    #     images:
    #       - name: alpine
    #         artifact-name: Niumside-Pop-Tracker_nightly-x86_64-unknown-linux-musl
    #         platform: amd64
    #         os: linux
    #       - name: alpine
    #         artifact-name: Niumside-Pop-Tracker_nightly-aarch64-unknown-linux-musl
    #         platform: arm64
    #         os: linux

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Download a x86_64 binary artifact
        uses: actions/download-artifact@v3
        with:
          name: Niumside-Pop-Tracker_nightly-x86_64-unknown-linux-musl

      - run: mv niumside-poptracker niumside-poptracker-x86_64-unknown-linux-musl

      - name: Download a aarch64 binary artifact
        uses: actions/download-artifact@v3
        with:
          name: Niumside-Pop-Tracker_nightly-aarch64-unknown-linux-musl

      - run: mv niumside-poptracker niumside-poptracker-aarch64-unknown-linux-musl

      - run: ls -al

      # If github.ref_name is not master, then we append the branch name to the image tag as PUBLIC_IMAGE_TAG else we set PUBLIC_IMAGE_TAG to IMAGE_TAG
      - name: Set PUBLIC_IMAGE_TAG
        run: |
          if [ "${{ github.ref_name }}" != "master" ]; then
            echo "PUBLIC_IMAGE_TAG=${{ env.IMAGE_TAG }}-${{ github.ref_name }}" >> $GITHUB_ENV
          else
            echo "PUBLIC_IMAGE_TAG=${{ env.IMAGE_TAG }}" >> $GITHUB_ENV
          fi

      # build and push the images the ghcr.io registry with PUBLIC_IMAGE_TAG as tag
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v4
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          file: ./production.Dockerfile
          context: .
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.PUBLIC_IMAGE_TAG }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.PUBLIC_IMAGE_TAG }}
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.PUBLIC_IMAGE_TAG }},mode=max
