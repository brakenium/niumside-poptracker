name: CICD

env:
  RUST_BACKTRACE: full
  CARGO_TERM_COLOR: always

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  binary-builds:
    name: Builds for ${{ matrix.target }} ${{ matrix.channel }} on ${{ matrix.os }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest]
        channel: [nightly]
        target:
          # Linux x64 gnu and musl
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          # Windows x86_64
          - x86_64-pc-windows-msvc
          # Linux arm64 gnu and musl
          - aarch64-unknown-linux-gnu
          - aarch64-unknown-linux-musl
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
    - name: Install Rust ${{ matrix.target }} ${{ matrix.channel }}
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.channel }}
        target: ${{ matrix.target }}
        override: true
    - name: ${{ matrix.target }} build
      run: cargo build --release
    - name: Upload binary artifact
      uses: actions/upload-artifact@v3
      with:
        name: Niumside-Pop-Tracker_${{ matrix.channel }}-${{ matrix.target }}
        path: target/release/niumside-poptracker

  docker-image-build:
    needs: binary-builds
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
      IMAGE_TAG: ${{ matrix.tags.name }}-unstable
    strategy:
      fail-fast: true
      matrix:
        tags:
          - name: alpine
            artifact-name: x86_64-unknown-linux-musl

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Download a single artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.tags.artifact-name }}
      # move the artifact to the current directory and rename to niumside-poptracker
      - name: Rename artifact
        run: mv ${{ matrix.tags.artifact-name }}/niumside-poptracker niumside-poptracker

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v4
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          file: ./production.Dockerfile
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          cache-to: type=inline
