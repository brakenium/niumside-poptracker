name: Builds

env:
  RUST_BACKTRACE: full
  CARGO_TERM_COLOR: always

on:
  push:
    branches:
      - master
    paths:
      - .github/workflows/builds.yaml
      - migrations/**
      - src/**
      - .sqlx/**
      - Cargo.toml
      - Cargo.lock
      - build.rs
      - Dockerfile
      - .dockerignore
      - rust-toolchain.toml

  workflow_dispatch:

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

jobs:
  rust-binary-builds:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
#          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-gnu
#          - aarch64-unknown-linux-musl
          - armv7-unknown-linux-gnueabihf
#          - armv7-unknown-linux-musleabi
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install dependencies
        run: sudo apt-get install -y libssl-dev

      - name: Install cross compilation dependencies for aarch64-unknown-linux-gnu
        run: sudo apt-get install -y gcc-aarch64-linux-gnu binutils-aarch64-linux-gnu
        if: matrix.target == 'aarch64-unknown-linux-gnu'

      - name: Install cross compilation dependencies for armv7-unknown-linux-gnueabihf
        run: sudo apt-get install -y gcc-arm-linux-gnueabihf binutils-arm-linux-gnueabihf
        if: matrix.target == 'armv7-unknown-linux-gnueabihf'

      - name: Install Rust toolchain
        run: rustup update && rustup toolchain install stable

      - name: Install Rust target
        run: rustup target add ${{ matrix.target }}

      - name: Restore target directory cache
        uses: actions/cache/restore@v4
        with:
          path: target
          key: ${{ matrix.target }}-target-${{ hashFiles('**/Cargo.lock') }}

#      - name: Install cross-rs
#        run: curl -L https://github.com/cross-rs/cross/releases/latest/download/cross-x86_64-unknown-linux-gnu.tar.gz | tar xz && sudo mv cross /usr/local/bin

      - name: Build
        run: cargo build --release --target ${{ matrix.target }} || (cargo clean && cargo build --release --target ${{ matrix.target }})

      - name: Save target directory cache
        uses: actions/cache/save@v4
        with:
          path: target
          key: ${{ matrix.target }}-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Prepare artifact
        run: mkdir binaries && mv target/niumside-poptracker binaries/niumside-poptracker || mv target/${{ matrix.target }}/release/niumside-poptracker binaries/niumside-poptracker

      # List the contents of the binaries directory
      - name: List binaries
        run: ls -l --color binaries

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}-niumside-poptracker
          path: binaries/niumside-poptracker

  docker-image-build-and-push:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: rust-binary-builds
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # restore artifacts from rust-binary-builds
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          path: binaries/

      # Recursively list the contents of the binaries directory
      - name: List binaries
        run: ls -lR --color binaries

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ steps.meta.outputs.tags }}
          cache-to: type=inline
